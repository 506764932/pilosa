package pql

type PQL Peg {
     Query
}


Calls <- Call* !.
Call <-  whitesp < IDENT > { p.startCall(buffer[begin:end] ) } open allargs comma? close whitesp { p.endCall() }
allargs <- Call (comma Call)* (comma args)? / comma? args / sp
args <- arg (comma args)? sp
arg <- (   field sp '=' sp value
         / field sp COND sp value
         )
COND <- ( '><' { p.addBTWN() }
        / '<=' { p.addLTE() }
        / '>=' { p.addGTE() }
        / '==' { p.addEQ() }
        / '!=' { p.addNEQ() }
        / '<' { p.addLT() }
        / '>' { p.addGT() }
        )
open <- '(' sp
value <- ( item
         / lbrack { p.startList() } list rbrack { p.endList() }
         )
list <- item (comma list)?
item <- ( 'null' &(comma / sp close) { p.addVal(nil) }
         / 'true' &(comma / sp close) { p.addVal(true) }
         / 'false' &(comma / sp close) { p.addVal(false) }
         / < '-'? [0-9]+ ('.'[0-9]*)? > { p.addNumVal(buffer[begin:end]) }
         / < '-'? '.'[0-9]+ > { p.addNumVal(buffer[begin:end]) }
         / < ([[A-Z]] / [0-9] / '-' / '_' / ':')+ > { p.addVal(buffer[begin:end]) }
         / '"' < doublequotedstring > '"' { p.addVal(buffer[begin:end]) }
         / '\'' < singlequotedstring > '\'' { p.addVal(buffer[begin:end]) }
         )

doublequotedstring <- ( [^"\\\n] / '\\n' / '\\\"' / '\\\'' / '\\\\' )*
singlequotedstring <- ( [^'\\\n] / '\\n' / '\\\"' / '\\\'' / '\\\\' )*

field <- < [[A-Z]] ( [[A-Z]] / [0-9] / '_' )* > { p.addField(buffer[begin:end]) }
close <- ')' sp
sp <- ( ' ' / '\t' )*
comma <- sp ',' sp
lbrack <- '[' sp
rbrack <- sp ']' sp
whitesp <- ( ' ' / '\t' / '\n' )*
IDENT <- [[A-Z]] ([[A-Z]] / [0-9] / '-' / '_' / '.')*